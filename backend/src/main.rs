use tokio::io::{self, AsyncBufReadExt, BufReader};
use async_tungstenite::tokio::connect_async;
use futures_util::{SinkExt, StreamExt};
use serde::{Deserialize, Serialize};
use std::env;

#[derive(Serialize, Deserialize, Debug)]
struct Task {
    url: String,
    sitekey: String,
    #[serde(rename = "type")]
    kind: String,
}

#[derive(Serialize, Deserialize, Debug)]
struct AuthPayload {
    api_key: String,
}

#[derive(Serialize, Deserialize, Debug)]
struct CaptchaSolution {
    token: String,
    url: String,
    #[serde(rename = "type")]
    kind: String,
}

#[tokio::main]
async fn main() {
    let mut args = env::args().skip(1);

    if let Some(arg) = args.next() {
        if arg == "auth" {
            run_auth_mode().await;
            return;
        }
    }

    run_task_mode().await;
}

async fn run_auth_mode() {
    eprintln!("üîê –†–µ–∂–∏–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");

    let stdin = io::stdin();
    let mut lines = BufReader::new(stdin).lines();

    let Some(Ok(line)) = lines.next_line().await else {
        eprintln!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–ª—é—á");
        std::process::exit(1);
    };

    let Ok(auth): Result<AuthPayload, _> = serde_json::from_str(&line) else {
        eprintln!("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π JSON");
        std::process::exit(1);
    };

    let client = reqwest::Client::new();
    match client.post("http://127.0.0.1:8080/auth")
        .json(&auth)
        .send()
        .await
    {
        Ok(res) => {
            let text = res.text().await.unwrap_or_else(|_| "{}".into());
            println!("{}", text);
        },
        Err(e) => {
            eprintln!("‚ùå –û—à–∏–±–∫–∞ HTTP: {e}");
            std::process::exit(1);
        }
    }
}

async fn run_task_mode() {
    eprintln!("üì¶ –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º");
    let stdin = io::stdin();
    let mut lines = BufReader::new(stdin).lines();

    eprintln!("‚è≥ –û–∂–∏–¥–∞–µ–º API –∫–ª—é—á...");
    let Some(Ok(line)) = lines.next_line().await else {
        eprintln!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å API –∫–ª—é—á");
        return;
    };

    let Ok(auth): Result<AuthPayload, _> = serde_json::from_str(&line) else {
        eprintln!("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π JSON –¥–ª—è API –∫–ª—é—á–∞");
        return;
    };

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
    eprintln!("üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...");
    let (ws_stream, _) = match connect_async("ws://127.0.0.1:8080/socket").await {
        Ok(pair) => pair,
        Err(e) => {
            eprintln!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {e}");
            return;
        }
    };

    eprintln!("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω");

    let (mut write, mut read) = ws_stream.split();

    // –û—Ç–ø—Ä–∞–≤–∫–∞ API –∫–ª—é—á–∞
    let Ok(auth_json) = serde_json::to_string(&auth) else {
        eprintln!("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª—é—á–∞");
        return;
    };

    if let Err(e) = write.send(auth_json.into()).await {
        eprintln!("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª—é—á–∞: {e}");
        return;
    }

    eprintln!("üì§ –ö–ª—é—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–µ–º –∑–∞–¥–∞—á—É...");

    // –û–∂–∏–¥–∞–µ–º –∑–∞–¥–∞—á—É
    while let Some(msg) = read.next().await {
        let Ok(msg) = msg else {
            eprintln!("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è WebSocket");
            break;
        };

        if msg.is_text() {
            let Ok(task): Result<Task, _> = serde_json::from_str(&msg.to_text().unwrap_or("")) else {
                eprintln!("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á–∏");
                continue;
            };

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ stdout
            println!("{}", serde_json::to_string(&task).unwrap());
            eprintln!("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ stdout. –û–∂–∏–¥–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ...");

            // –ß–∏—Ç–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –∏–∑ stdin
            let Some(Ok(line)) = lines.next_line().await else {
                eprintln!("‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–µ –∏–∑ stdin");
                break;
            };

            let Ok(solution): Result<CaptchaSolution, _> = serde_json::from_str(&line) else {
                eprintln!("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π JSON –≤ —Ä–µ—à–µ–Ω–∏–∏");
                break;
            };

            let Ok(solution_json) = serde_json::to_string(&solution) else {
                eprintln!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ");
                break;
            };

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—à–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ WebSocket
            if let Err(e) = write.send(solution_json.into()).await {
                eprintln!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ: {e}");
                break;
            }

            eprintln!("üì§ –†–µ—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...");
            break;
        }
    }

    eprintln!("üëã Rust CLI –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É");
}