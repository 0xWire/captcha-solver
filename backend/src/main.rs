use tokio::io::{self, AsyncBufReadExt, BufReader};
use async_tungstenite::tokio::connect_async;
use futures_util::{SinkExt, StreamExt};
use serde::{Deserialize, Serialize};

#[derive(Deserialize, Serialize)]
struct Task {
    url: String,
    sitekey: String,
    #[serde(rename = "type")]
    kind: String,
}

#[derive(Serialize, Deserialize)]
struct AuthPayload {
    api_key: String,
}

#[tokio::main]
async fn main() {
    eprintln!("üì¶ Rust CLI –∑–∞–ø—É—â–µ–Ω");
    
    let stdin = io::stdin();
    let mut lines = BufReader::new(stdin).lines();

    eprintln!("‚è≥ –û–∂–∏–¥–∞–µ–º API –∫–ª—é—á –∏–∑ stdin...");
    
    let line = match lines.next_line().await {
        Ok(Some(line)) => line,
        Ok(None) => {
            eprintln!("‚ùå –ü—É—Å—Ç–æ–π –≤–≤–æ–¥ –∏–∑ stdin!");
            return;
        }
        Err(e) => {
            eprintln!("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ stdin: {}", e);
            return;
        }
    };

    eprintln!("üîë –ü–æ–ª—É—á–µ–Ω –≤–≤–æ–¥ –∏–∑ stdin: {}", line);
    
    let auth: AuthPayload = match serde_json::from_str(&line) {
        Ok(auth) => auth,
        Err(e) => {
            eprintln!("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {}", e);
            return;
        }
    };

    eprintln!("üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...");
    
    let (ws_stream, _) = match connect_async("ws://127.0.0.1:8080/socket").await {
        Ok(conn) => conn,
        Err(e) => {
            eprintln!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket: {}", e);
            return;
        }
    };

    eprintln!("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WebSocket");
    
    let (mut write, mut read) = ws_stream.split();

    let auth_json = serde_json::to_string(&auth).unwrap();
    if let Err(e) = write.send(auth_json.into()).await {
        eprintln!("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ WebSocket: {}", e);
        return;
    }
    
    eprintln!("üì§ API –∫–ª—é—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ...");

    while let Some(msg) = read.next().await {
        match msg {
            Ok(msg) => {
                if msg.is_text() {
                    let text = msg.into_text().unwrap();
                    eprintln!("üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {}", text);
                    
                    match serde_json::from_str::<Task>(&text) {
                        Ok(task) => {
                            println!("{}", serde_json::to_string(&task).unwrap());
                            eprintln!("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ stdout");
                            break;
                        }
                        Err(e) => {
                            eprintln!("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–¥–∞–Ω–∏—è: {}", e);
                        }
                    }
                }
            }
            Err(e) => {
                eprintln!("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ WebSocket: {}", e);
                break;
            }
        }
    }
    
    eprintln!("üëã Rust CLI –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É");
}
