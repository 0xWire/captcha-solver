// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
ipcRenderer.on('task-received', (event, task) => {
    console.log('üì¶ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ:', task);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–ø—á—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ
    ipcRenderer.invoke('load-captcha', {
        url: task.url,
        sitekey: task.sitekey,
        type: task.type
    }).then(success => {
        if (!success) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ø—á–∏');
        }
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏
ipcRenderer.on('captcha-solution', (event, token) => {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const solution = {
        command: 'submit_solution',
        task_id: currentTaskId,
        solution: token
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ IPC –≤ main –ø—Ä–æ—Ü–µ—Å—Å
    ipcRenderer.send('submit-solution', solution);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
ipcRenderer.on('error', (event, error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
}); 