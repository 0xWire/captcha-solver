const { app, BrowserWindow, ipcMain, session } = require('electron');
const path = require('path');
const { spawn } = require('child_process');
const axios = require('axios');

let mainWin;
let apiKey = null; // Store API key

function createWindow(htmlFile) {
  mainWin = new BrowserWindow({
    width: 800,
    height: 600,
    show: false,
    autoHideMenuBar: true,
    webPreferences: {
      preload: path.join(__dirname, 'preload.js'),
      contextIsolation: true,
      nodeIntegration: false
    }
  });

  mainWin.loadFile(htmlFile);
  mainWin.once('ready-to-show', () => mainWin.show());
}

// üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å –æ–∫–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app.whenReady().then(() => {
  createWindow('auth.html');
});

ipcMain.handle('auth:login', async (_event, apiKey) => {
  console.log("üîê –ü–æ–ª—É—á–µ–Ω –∫–ª—é—á:", apiKey);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ Go-—Å–µ—Ä–≤–µ—Ä (localhost)
  try {
    const res = await axios.post('http://127.0.0.1:8080/auth', { api_key: apiKey });
    if (res.data.status === "ok") {
      console.log("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞");
      
      // Store API key for later use
      global.apiKey = apiKey;

      // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      mainWin.loadFile('menu.html');
      return { ok: true, balance: res.data.balance || 123.45 };
    } else {
      console.log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á");
      return { ok: false };
    }
  } catch (err) {
    console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", err);
    return { ok: false };
  }
});

ipcMain.on('menu:solve', () => {
  runCaptchaSolver();
});

function runCaptchaSolver() {
  // Check if we have API key
  if (!global.apiKey) {
    console.error("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    return;
  }

  console.log("üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ—à–∞—Ç–µ–ª—è –∫–∞–ø—á–∏...");
  
  const rustPath = path.join(process.resourcesPath || '.', 'captcha_cli');
  console.log(`üìÇ –ü—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É: ${rustPath}`);
  
  const rust = spawn(rustPath);
  
  // Create API key payload
  const authPayload = JSON.stringify({ api_key: global.apiKey });
  
  // Write to stdin - this is what the Rust process is waiting for
  rust.stdin.write(authPayload + '\n');
  rust.stdin.end();
  
  console.log(`‚úÖ API –∫–ª—é—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Rust –ø—Ä–æ—Ü–µ—Å—Å`);

  rust.stdout.on('data', (data) => {
    try {
      const task = JSON.parse(data.toString().trim());
      console.log("üì¶ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ:", task);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–∞–ø—á–µ–π
      const captchaWin = new BrowserWindow({
        width: 1000,
        height: 800,
        show: false,
        webPreferences: {
          preload: path.join(__dirname, 'preload.js'),
          contextIsolation: true,
          devTools: true
        }
      });

      // –£–¥–∞–ª—è–µ–º CSP
      session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
        const headers = details.responseHeaders;
        delete headers['content-security-policy'];
        delete headers['content-security-policy-report-only'];
        callback({ responseHeaders: headers });
      });

      captchaWin.loadURL(task.url);
      captchaWin.webContents.once('did-finish-load', () => {
        captchaWin.webContents.send('task', task);
        captchaWin.show();
      });
    } catch (e) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç Rust:", e);
    }
  });

  rust.stderr.on('data', (data) => {
    console.error("RUST STDERR:", data.toString());
  });

  rust.on('exit', (code) => {
    console.log(`Rust –∑–∞–≤–µ—Ä—à—ë–Ω —Å –∫–æ–¥–æ–º ${code}`);
  });
  
  rust.on('error', (err) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Rust –ø—Ä–æ—Ü–µ—Å—Å–∞:", err);
  });
}

